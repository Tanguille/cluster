[Settings]
# Level of logging; One of CRITICAL, ERROR, WARNING, NOTICE, INFO, DEBUG, TRACE
ConsoleLevel = "INFO"

# Enable logging to files
Logging = true

# Folder where your completed downloads are put into. Can be found in qBitTorrent -> Options -> Downloads -> Default Save Path
CompletedDownloadFolder = "/completed_downloads"

# Folder to check for free space. Usually the same as CompletedDownloadFolder
FreeSpaceFolder = "/completed_downloads"

#The desired amount of free space in the downloads directory [K=kilobytes, M=megabytes, G=gigabytes, T=terabytes] (set to -1 to disable)
FreeSpace = "300G"

# Time to sleep for if there is no internet (in seconds: 600 = 10 Minutes)
NoInternetSleepTimer = 15

# Time to sleep between reprocessing torrents (in seconds: 600 = 10 Minutes)
LoopSleepTimer = 10

# Add torrents to this category to mark them as failed
FailedCategory = "failed"

# Add torrents to this category to trigger them to be rechecked properly
RecheckCategory = "recheck"

# Ignore Torrents which are younger than this value (in seconds: 600 = 10 Minutes)
# Only applicable to Re-check and failed categories
IgnoreTorrentsYoungerThan = 180

# URL to be pinged to check if you have a valid internet connection
# These will be pinged a **LOT** make sure the service is okay with you sending all the continuous pings.
PingURLS = ["one.one.one.one", "dns.google.com"]

# FFprobe auto updates, binaries are downloaded from https://ffbinaries.com/downloads
# If this is disabled and you want ffprobe to work
# Ensure that you add the binary for your platform into ~/qBitrr/qBitManager
# By default this will always be on even if config does not have these key - to disable you need to explicitly set it to `False`
FFprobeAutoUpdate = true

[qBit]
# If this is enable qBitrr can run in a headless mode where it will only process searches.
# If media search is enabled in their individual categories
# This is useful if you use for example Sabnzbd/NZBGet for downloading content but still want the faster media searches provided by qbit
Disabled = false

# qBit WebUI Port - Can be found in Options > Web UI (called "IP Address")
Host = "http://192.168.0.27"

# qBit WebUI Port - Can be found in Options > Web UI (called "Port" on top right corner of the window)
Port = 10095

# qBit WebUI Authentication - Can be found in Options > Web UI > Authentication
UserName = "${QBITTORRENT_USER}"

# If you set "Bypass authentication on localhost or whitelisted IPs" remove this field.
Password = "${QBITTORRENT_PWD}"

[Sonarr-TV]
# Toggle whether to manage the Servarr instance torrents.
Managed = true

# The URL used to access Servarr interface (if you use a domain enter the domain without a port)
URI = "http://sonarr.media.svc.cluster.local"

# The Servarr API Key, Can be found it Settings > General > Security
APIKey = "${SONARR_API_KEY}"

# Category applied by Servarr to torrents in qBitTorrent, can be found in Settings > Download Clients > qBit > Category
Category = "tv-sonarr"

# Toggle whether to send a query to Servarr to search any failed torrents
ReSearch = true

# The Servarr's Import Mode(one of Move, Copy or Auto)
importMode = "Auto"

# Timer to call RSSSync (In minutes) - Set to 0 to disable (Values below 5 can cause errors for maximum retires)
RssSyncTimer = 1

# Timer to call RefreshDownloads to update the queue. (In minutes) - Set to 0 to disable (Values below 5 can cause errors for maximum retires)
RefreshDownloadsTimer = 1

# Error messages shown my the Arr instance which should be considered failures.
# This entry should be a list, leave it empty if you want to disable this error handling.
# If enabled qBitrr will remove the failed files and tell the Arr instance the download failed
ArrErrorCodesToBlocklist = [
  "Not an upgrade for existing episode file(s)",
  "Not a preferred word upgrade for existing episode file(s)",
  "Unable to determine if file is a sample",
]


[Sonarr-TV.EntrySearch]
# All these settings depends on SearchMissing being True and access to the Servarr database file.

# Should search for Missing files?
SearchMissing = true

# Should search for specials episodes? (Season 00)
AlsoSearchSpecials = false

# Maximum allowed Searches at any one points (I wouldn't recommend settings this too high)
# Sonarr has a hardcoded cap of 3 simultaneous tasks
SearchLimit = 2

# It will order searches by the year the EPISODE was first aired
SearchByYear = true

# Reverse search order (Start searching oldest to newest)
SearchInReverse = false

# Delay between request searches in seconds
SearchRequestsEvery = 600

# Search movies which already have a file in the database in hopes of finding a better quality version.
DoUpgradeSearch = true

# Do a quality unmet search for existing entries.
QualityUnmetSearch = true

# Once you have search all files on your specified year range restart the loop and search again.
SearchAgainOnSearchCompletion = true

# Search by series instead of by episode
SearchBySeries = true

# Prioritize Today's releases (Similar effect as RSS Sync, where it searches today's release episodes first, only works on Sonarr).
PrioritizeTodaysReleases = true

[Sonarr-TV.EntrySearch.Overseerr]
# Search Overseerr for pending requests (Will only work if 'SearchMissing' is enabled.)
# If this and Ombi are both enable, Ombi will be ignored
SearchOverseerrRequests = true

# Overseerr's URI
OverseerrURI = "http://jellyseerr.media.svc.cluster.local"

# Overseerr's API Key
OverseerrAPIKey = "${JELLYSEERR_API_KEY}"

# Only process approved requests
ApprovedOnly = true

#Only for 4K Instances
Is4K = true


[Sonarr-TV.Torrent]
# Set it to regex matches to respect/ignore case.
CaseSensitiveMatches = false

# These regex values will match any folder where the full name matches the specified values here, comma separated strings.
# These regex need to be escaped, that's why you see so many backslashes.
FolderExclusionRegex = [
  "\\bextras?\\b",
  "\\bfeaturettes?\\b",
  "\\bsamples?\\b",
  "\\bscreens?\\b",
  "\\bnc(ed|op)?(\\\\d+)?\\b",
]

# These regex values will match any folder where the full name matches the specified values here, comma separated strings.
# These regex need to be escaped, that's why you see so many backslashes.
FileNameExclusionRegex = [
  "\\bncop\\\\d+?\\b",
  "\\bnced\\\\d+?\\b",
  "\\bsample\\b",
  "brarbg.com\\b",
  "\\btrailer\\b",
  "music video",
  "comandotorrents.com",
]

# Only files with these extensions will be allowed to be downloaded, comma separated strings or regex, leave it empty to allow all extensions
FileExtensionAllowlist = [
  ".mp4",
  ".mkv",
  ".sub",
  ".ass",
  ".srt",
  ".!qB",
  ".parts",
]


# Auto delete files that can't be playable (i.e .exe, .png)
AutoDelete = true

# Ignore Torrents which are younger than this value (in seconds: 600 = 10 Minutes)
IgnoreTorrentsYoungerThan = 180

# Maximum allowed remaining ETA for torrent completion (in seconds: 3600 = 1 Hour)
# Note that if you set the MaximumETA on a tracker basis that value is favoured over this value
MaximumETA = 604800

# Do not delete torrents with higher completion percentage than this setting (0.5 = 50%, 1.0 = 100%)
MaximumDeletablePercentage = 0.99

# Ignore slow torrents.
DoNotRemoveSlow = true

[Sonarr-TV.Torrent.SeedingMode]
# Set the maximum allowed download rate for torrents
# Set this value to -1 to disabled it
# Note that if you set the DownloadRateLimit on a tracker basis that value is favoured over this value
DownloadRateLimitPerTorrent = -1

# Set the maximum allowed upload rate for torrents
# Set this value to -1 to disabled it
# Note that if you set the UploadRateLimit on a tracker basis that value is favoured over this value
UploadRateLimitPerTorrent = -1

# Set the maximum allowed upload ratio for torrents
# Set this value to -1 to disabled it
# Note that if you set the MaxUploadRatio on a tracker basis that value is favoured over this value
MaxUploadRatio = -1

# Set the maximum seeding time for torrents
# Set this value to -1 to disabled it
# Note that if you set the MaxSeedingTime on a tracker basis that value is favoured over this value
MaxSeedingTime = -1

# Enable if you want to remove dead trackers
RemoveDeadTrackers = false
# If "RemoveDeadTrackers" is set to true then remove trackers with the following messages
RemoveTrackerWithMessage = [
  "skipping tracker announce (unreachable)",
  "No such host is known",
  "unsupported URL protocol",
  "info hash is not authorized with this tracker",
]

# You can have multiple trackers set here or none just add more subsections.

[Radarr]
# Toggle whether to manage the Servarr instance torrents.
Managed = true

# The URL used to access Servarr interface (if you use a domain enter the domain without a port)
URI = "http://radarr.media.svc.cluster.local"

# The Servarr API Key, Can be found it Settings > General > Security
APIKey = "${RADARR_API_KEY}"

# Category applied by Servarr to torrents in qBitTorrent, can be found in Settings > Download Clients > qBit > Category
Category = "radarr"

# Toggle whether to send a query to Servarr to search any failed torrents
ReSearch = true

# The Servarr's Import Mode(one of Move, Copy or Auto)
importMode = "Auto"

# Timer to call RSSSync (In minutes) - Set to 0 to disable (Values below 5 can cause errors for maximum retires)
RssSyncTimer = 1

# Timer to call RefreshDownloads to update the queue. (In minutes) - Set to 0 to disable (Values below 5 can cause errors for maximum retires)
RefreshDownloadsTimer = 1

# Error messages shown my the Arr instance which should be considered failures.
# This entry should be a list, leave it empty if you want to disable this error handling.
# If enabled qBitrr will remove the failed files and tell the Arr instance the download failed
ArrErrorCodesToBlocklist = [
  "Not an upgrade for existing movie file(s)",
  "Not a preferred word upgrade for existing movie file(s)",
  "Unable to determine if file is a sample",
]

[Radarr.EntrySearch]
# All these settings depends on SearchMissing being True and access to the Servarr database file.

# Should search for Missing files?
SearchMissing = true

# Should search for specials episodes? (Season 00)
AlsoSearchSpecials = false

# Maximum allowed Searches at any one points (I wouldn't recommend settings this too high)
# Radarr has a default of 3 simultaneous tasks, which can be increased up to 10 tasks
# If you set the environment variable of "THREAD_LIMIT" to a number between and including 2-10
# Radarr devs have stated that this is an unsupported feature so you will not get any support for doing so from them.
# That being said I've been daily driving 10 simultaneous tasks for quite a while now with no issues.
SearchLimit = 2

# It will order searches by the year the EPISODE was first aired
SearchByYear = true

# Reverse search order (Start searching oldest to newest)
SearchInReverse = false

# Delay between request searches in seconds
SearchRequestsEvery = 600

# Search movies which already have a file in the database in hopes of finding a better quality version.
DoUpgradeSearch = false

# Do a quality unmet search for existing entries.
QualityUnmetSearch = true

# Do a minimum custom format score unmet search for existing entries.
CustomFormatUnmetSearch = true

# Once you have search all files on your specified year range restart the loop and search again.
SearchAgainOnSearchCompletion = true


[Radarr.EntrySearch.Overseerr]
# Search Overseerr for pending requests (Will only work if 'SearchMissing' is enabled.)
# If this and Ombi are both enable, Ombi will be ignored
SearchOverseerrRequests = true

# Overseerr's URI
OverseerrURI = "http://jellyseerr.media.svc.cluster.local"

# Overseerr's API Key
OverseerrAPIKey = "${JELLYSEERR_API_KEY}"

# Only process approved requests
ApprovedOnly = true

#Only for 4K Instances
Is4K = true

[Radarr.Torrent]
# Set it to regex matches to respect/ignore case.
CaseSensitiveMatches = false

# These regex values will match any folder where the full name matches the specified values here, comma separated strings.
# These regex need to be escaped, that's why you see so many backslashes.
FolderExclusionRegex = [
  "\\bfeaturettes?\\b",
  "\\bsamples?\\b",
  "\\bscreens?\\b",
  "\\bspecials?\\b",
  "\\bova\\b",
  "\\bnc(ed|op)?(\\\\d+)?\\b",
]

# These regex values will match any folder where the full name matches the specified values here, comma separated strings.
# These regex need to be escaped, that's why you see so many backslashes.
FileNameExclusionRegex = [
  "\\bncop\\\\d+?\\b",
  "\\bnced\\\\d+?\\b",
  "\\bsample\\b",
  "brarbg.com\\b",
  "\\btrailer\\b",
  "music video",
  "comandotorrents.com",
]

# Only files with these extensions will be allowed to be downloaded, comma separated strings, leave it empty to allow all extensions
FileExtensionAllowlist = [
  ".mp4",
  ".mkv",
  ".sub",
  ".ass",
  ".srt",
  ".!qB",
  ".parts",
]

# Auto delete files that can't be playable (i.e .exe, .png)
AutoDelete = true

# Ignore Torrents which are younger than this value (in seconds: 600 = 10 Minutes)
IgnoreTorrentsYoungerThan = 180

# Maximum allowed remaining ETA for torrent completion (in seconds: 3600 = 1 Hour)
# Note that if you set the MaximumETA on a tracker basis that value is favoured over this value
MaximumETA = 604800

# Do not delete torrents with higher completion percentage than this setting (0.5 = 50%, 1.0 = 100%)
MaximumDeletablePercentage = 0.99

# Ignore slow torrents.
DoNotRemoveSlow = true

[Radarr.Torrent.SeedingMode]
# Set the maximum allowed download rate for torrents
# Set this value to -1 to disabled it
# Note that if you set the DownloadRateLimit on a tracker basis that value is avoured over this value
DownloadRateLimitPerTorrent = -1

# Set the maximum allowed upload rate for torrents
# Set this value to -1 to disabled it
# Note that if you set the UploadRateLimit on a tracker basis that value is favoured over this value
UploadRateLimitPerTorrent = -1

# Set the maximum allowed upload ratio for torrents
# Set this value to -1 to disabled it
# Note that if you set the MaxUploadRatio on a tracker basis that value is favoured over this value
MaxUploadRatio = -1

# Set the maximum seeding time for torrents
# Set this value to -1 to disabled it
# Note that if you set the MaxSeedingTime on a tracker basis that value is favoured over this value
MaxSeedingTime = -1

# Enable if you want to remove dead trackers
RemoveDeadTrackers = false

# If "RemoveDeadTrackers" is set to true then remove trackers with the following messages
RemoveTrackerWithMessage = [
  "skipping tracker announce (unreachable)",
  "No such host is known",
  "unsupported URL protocol",
  "info hash is not authorized with this tracker",
]
